{
    "IO_dask.IOWrite_Zarr.time_synthetic_write": {
        "code": "class IOWrite_Zarr:\n    def time_synthetic_write(self, backend):\n        self.da.store(self.target.storage_obj)\n\n    def setup(self, backend):\n        #cluster = KubeCluster.from_yaml('/home/jovyan/worker-template.yaml')\n        #cluster.adapt()\n        #client = Client(cluster)\n        chunksize=(10, 100, 100)\n        self.da = da.random.normal(10, 0.1, size=(100, 100, 100),\n                                   chunks=(100, 100, 100))\n        self.da_size = np.round(self.da.nbytes / 1024**2, 2)\n        self.target = target_zarr.ZarrStore(backend=backend, dask=True,\n                                            chunksize=chunksize, shape=self.da.shape,\n                                            dtype=self.da.dtype)\n        self.target.get_temp_filepath()\n    \n        if backend == 'GCS':\n            gsutil_arg = \"gs://%s\" % self.target.gcs_zarr\n            call([\"gsutil\", \"-q\", \"-m\", \"rm\",\"-r\", gsutil_arg])",
        "name": "IO_dask.IOWrite_Zarr.time_synthetic_write",
        "number": 0,
        "param_names": [
            "backend"
        ],
        "params": [
            [
                "'POSIX'",
                "'GCS'",
                "'FUSE'"
            ]
        ],
        "repeat": 0,
        "sample_time": 0.1,
        "timeout": 300,
        "type": "time",
        "unit": "seconds",
        "version": "a3d208662a396c8e3580115863431d17578d84e804008e2e2b1f2a45c43792a8",
        "warmup_time": 0.0
    },
    "IO_dask.IOWrite_Zarr.track_ds_size": {
        "code": "class IOWrite_Zarr:\n    def track_ds_size(self, backend):\n        return self.da_size\n\n    def setup(self, backend):\n        #cluster = KubeCluster.from_yaml('/home/jovyan/worker-template.yaml')\n        #cluster.adapt()\n        #client = Client(cluster)\n        chunksize=(10, 100, 100)\n        self.da = da.random.normal(10, 0.1, size=(100, 100, 100),\n                                   chunks=(100, 100, 100))\n        self.da_size = np.round(self.da.nbytes / 1024**2, 2)\n        self.target = target_zarr.ZarrStore(backend=backend, dask=True,\n                                            chunksize=chunksize, shape=self.da.shape,\n                                            dtype=self.da.dtype)\n        self.target.get_temp_filepath()\n    \n        if backend == 'GCS':\n            gsutil_arg = \"gs://%s\" % self.target.gcs_zarr\n            call([\"gsutil\", \"-q\", \"-m\", \"rm\",\"-r\", gsutil_arg])",
        "name": "IO_dask.IOWrite_Zarr.track_ds_size",
        "param_names": [
            "backend"
        ],
        "params": [
            [
                "'POSIX'",
                "'GCS'",
                "'FUSE'"
            ]
        ],
        "timeout": 300,
        "type": "track",
        "unit": "megabytes",
        "version": "dd811ece2e017f986f08b511ae02b307d197f7a94b163462a42710348c6e664c"
    },
    "version": 1
}