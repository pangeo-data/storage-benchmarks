{
    "IO_numpy.IORead_Random_HDF5_POSIX.time_readtest": {
        "code": "def time_readtest(self):\n    f = self.open(self.path, 'r')\n    readtest(f)\n    f.close()\n",
        "goal_time": 2.0,
        "name": "IO_numpy.IORead_Random_HDF5_POSIX.time_readtest",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "IO_numpy.IORead_Random_HDF5_POSIX.time_readtest",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "IO_numpy.IORead_Random_HSDS.time_readtest": {
        "code": "def time_readtest(self):\n    f = self.open(self.path, 'r')\n    readtest(f)\n    f.close()\n",
        "goal_time": 2.0,
        "name": "IO_numpy.IORead_Random_HSDS.time_readtest",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "IO_numpy.IORead_Random_HSDS.time_readtest",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "IO_numpy.IORead_Random_Zarr.time_readtest": {
        "code": "def time_readtest(self, backend, nz):\n    f = self.target.open(self.target.storage_obj, 'r')\n    readtest(f)\n",
        "goal_time": 2.0,
        "name": "IO_numpy.IORead_Random_Zarr.time_readtest",
        "number": 0,
        "param_names": [
            "backend",
            "nz"
        ],
        "params": [
            [
                "'POSIX'",
                "'GCS'",
                "'FUSE'"
            ],
            [
                "1",
                "5"
            ]
        ],
        "pretty_name": "IO_numpy.IORead_Random_Zarr.time_readtest",
        "repeat": 0,
        "timeout": 300,
        "type": "time",
        "unit": "seconds"
    },
    "IO_numpy.IOSelect_LOCA_HSDS.time_readslice": {
        "code": "def time_readslice(self):\n    f = self.open(self.filepath, 'r')\n    tasmax_slicetest(f)\n    f.close()\n",
        "goal_time": 2.0,
        "name": "IO_numpy.IOSelect_LOCA_HSDS.time_readslice",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "IO_numpy.IOSelect_LOCA_HSDS.time_readslice",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "IO_numpy.IOWrite_Random_HDF5_POSIX.time_writetest": {
        "code": "def time_writetest(self):\n    f = self.open(self.path, 'a')\n    writetest(f, self.data)\n    f.close()\n",
        "goal_time": 2.0,
        "name": "IO_numpy.IOWrite_Random_HDF5_POSIX.time_writetest",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "IO_numpy.IOWrite_Random_HDF5_POSIX.time_writetest",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "IO_numpy.IOWrite_Random_HSDS.time_writetest": {
        "code": "def time_writetest(self):\n    f = self.open(self.path, 'a')\n    writetest(f, self.data)\n    f.close()\n",
        "goal_time": 2.0,
        "name": "IO_numpy.IOWrite_Random_HSDS.time_writetest",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "IO_numpy.IOWrite_Random_HSDS.time_writetest",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "IO_numpy.IOWrite_Random_Zarr.time_writetest": {
        "code": "def time_writetest(self, backend, nz):\n    f = self.target.open(self.target.storage_obj, 'a')\n    writetest(f, self.data)\n",
        "goal_time": 2.0,
        "name": "IO_numpy.IOWrite_Random_Zarr.time_writetest",
        "number": 0,
        "param_names": [
            "backend",
            "nz"
        ],
        "params": [
            [
                "'POSIX'",
                "'GCS'",
                "'FUSE'"
            ],
            [
                "1",
                "5"
            ]
        ],
        "pretty_name": "IO_numpy.IOWrite_Random_Zarr.time_writetest",
        "repeat": 0,
        "timeout": 300,
        "type": "time",
        "unit": "seconds"
    },
    "IO_xarray.IORead_Zarr.time_synthetic_read": {
        "code": "def time_synthetic_read(self, backend, nt):\n    ds = xr.open_zarr(self.target.storage_obj).load()\n",
        "goal_time": 2.0,
        "name": "IO_xarray.IORead_Zarr.time_synthetic_read",
        "number": 1,
        "param_names": [
            "backend",
            "nt"
        ],
        "params": [
            [
                "'POSIX'",
                "'GCS'",
                "'FUSE'"
            ],
            [
                "1",
                "5"
            ]
        ],
        "pretty_name": "IO_xarray.IORead_Zarr.time_synthetic_read",
        "repeat": 0,
        "timeout": 300,
        "type": "time",
        "unit": "seconds"
    },
    "IO_xarray.IOWrite_Zarr.time_synthetic_write": {
        "code": "def time_synthetic_write(self, backend, nt):\n    bmt.rand_xarray(nt=nt).to_zarr(self.target.storage_obj)\n",
        "goal_time": 2.0,
        "name": "IO_xarray.IOWrite_Zarr.time_synthetic_write",
        "number": 1,
        "param_names": [
            "backend",
            "nt"
        ],
        "params": [
            [
                "'POSIX'",
                "'GCS'",
                "'FUSE'"
            ],
            [
                "1",
                "5"
            ]
        ],
        "pretty_name": "IO_xarray.IOWrite_Zarr.time_synthetic_write",
        "repeat": 0,
        "timeout": 300,
        "type": "time",
        "unit": "seconds"
    },
    "version": 1
}